apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven'
sourceCompatibility = targetCompatibility = "1.8"

version = "1.12.2-" + getVersion()
group = getGroup()
archivesBaseName = getArchiveName()

minecraft {
    version = "1.12.2-14.23.5.2836"
	mappings = "snapshot_20171003"
	runDir = "run"
	replace '@FINGERPRINT@', project.findProperty('signSHA1')
	//useDepAts = true
}

repositories {
	jcenter()
	maven {
		name = "progwml6"
		url = "http://dvs1.progwml6.com/files/maven"
	}
	maven {
		name = "tterrag"
		url = "http://maven.tterrag.com"
	}
	maven {
		name = "tterrag2"
		url = "http://maven2.tterrag.com"
	}
	maven {
		url "http://mobiusstrip.eu/maven"
	}
	maven {
		name = "tehnut"
		url = "http://tehnut.info/maven"
	}
	maven {
		name = "covers Maven"
		url = "http://maven.covers1624.net"
	}
	maven {
		name = "Curse"
		url = "https://minecraft.curseforge.com/api/maven/"
	}
	maven {
		name = "ChickenBones"
		url "http://chickenbones.net/maven"
	}
	maven {
		name = "k-4unl"
		url "http://maven.k-4u.nl"
	}
	maven {
		name = "LatvianModder"
		url = "https://maven.latmod.com"
	}
	maven {
		name = "mmd"
		url = "http://maven.mcmoddev.com"
	}
	maven {
		url = 'https://repo.elytradev.com'
	}
}

dependencies {
	//deobfCompile "mezz.jei:jei_1.12.2:4.14.3.238"
	compile "mezz.jei:jei_1.12.2:4.14.3.238"
	runtime "mezz.jei:jei_1.12.2:4.14.3.238"
	if (!project.hasProperty("excludePwLib")) {
		deobfCompile "p455w0rd:p455w0rdslib:1.12.2-2.2.104"
	}
	deobfCompile "mcjty.theoneprobe:TheOneProbe-1.12:1.12-1.4.23-16"
	deobfCompile "mcp.mobius.waila:Hwyla:1.8.26-B41_1.12.2"
	deobfCompile "laggoggles:LagGoggles-FORGE-1.12.2:4.3:HOTFIX"
}

task signJar(type: SignJar, dependsOn: reobfJar) {
    onlyIf {
        project.hasProperty('keyStore')
    }
    keyStore = project.findProperty('keyStore')
    alias = project.findProperty('keyStoreAlias')
    storePass = project.findProperty('keyStorePass')
    keyPass = project.findProperty('keyStoreKeyPass')
    inputFile = jar.archivePath
    outputFile = jar.archivePath
}

build.dependsOn signJar

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    classifier = 'sources'
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
    manifest {
        if (project.hasProperty("fmlPlugin")) {
			if (file("./src/main/resources/" + getModId() + "_at.cfg").exists()) {
				manifest.mainAttributes(
					"Created-By": "${System.getProperty('java.vm.version')} + (${System.getProperty('java.vm.vendor')})",
					"Implementation-Title": getModId(),
					"Implementation-Version": getVersion(),
					"Built-On": getVersion(),
					"FMLCorePlugin": project.fmlPlugin,
					"FMLCorePluginContainsFMLMod": "true",
					"FMLAT": getModId() + "_at.cfg"
				)
			}
			else {
				manifest.mainAttributes(
					"Created-By": "${System.getProperty('java.vm.version')} + (${System.getProperty('java.vm.vendor')})",
					"Implementation-Title": getModId(),
					"Implementation-Version": getVersion(),
					"Built-On": getVersion(),
					"FMLCorePlugin": project.fmlPlugin,
					"FMLCorePluginContainsFMLMod": "true"
				)
			}
		}
		else if (file("./src/main/resources/" + getModId() + "_at.cfg").exists()) {
			attributes 'FMLAT': getModId() + "_at.cfg"
		}
    }
}

artifacts {
	archives sourcesJar
	archives deobfJar
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version
    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"
        expand "version": project.version, "mcversion": project.minecraft.version
    }
    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }
	rename '(.+_at.cfg)', 'META-INF/$1'
}

jar {
	manifest {
		if (project.hasProperty("fmlPlugin")) {
			if (file("./src/main/resources/" + getModId() + "_at.cfg").exists()) {
				manifest.mainAttributes(
					"Created-By": "${System.getProperty('java.vm.version')} + (${System.getProperty('java.vm.vendor')})",
					"Implementation-Title": getModId(),
					"Implementation-Version": getVersion(),
					"Built-On": getVersion(),
					"FMLCorePlugin": project.fmlPlugin,
					"FMLCorePluginContainsFMLMod": "true",
					"FMLAT": getModId() + "_at.cfg"
				)
			}
			else {
				manifest.mainAttributes(
					"Created-By": "${System.getProperty('java.vm.version')} + (${System.getProperty('java.vm.vendor')})",
					"Implementation-Title": getModId(),
					"Implementation-Version": getVersion(),
					"Built-On": getVersion(),
					"FMLCorePlugin": project.fmlPlugin,
					"FMLCorePluginContainsFMLMod": "true"
				)
			}
		}
		else if (file("./src/main/resources/" + getModId() + "_at.cfg").exists()) {
			attributes 'FMLAT': getModId() + "_at.cfg"
		}
	}
}

uploadArchives {
    repositories {
        mavenDeployer {
            if (project.hasProperty("local_maven") || (project.hasProperty("maven_user") && project.hasProperty("maven_pass") && project.hasProperty("gitSlug"))) {
				if (project.hasProperty("maven_pass")) {
					repository(url: "http://maven_upload.covers1624.net/") {
						authentication(userName: project.getProperty("maven_user"), password: project.getProperty("maven_pass"))
					}
				} else {
					repository(url: "file://${local_maven}/.m2/repository")
				}
                pom {
                    groupId = project.group
                    // Force the maven upload to use the <mcversion>-<version> syntax preferred at files
                    artifactId = project.archivesBaseName
                    project {
                        name project.archivesBaseName
                        packaging 'jar'
                        description project.archivesBaseName
                        url 'https://github.com/' + project.gitSlug

                        scm {
                            url 'https://github.com/' + project.gitSlug
                            connection 'scm:git:git://github.com/' + project.gitSlug + '.git'
                            developerConnection 'scm:git:git@github.com:' + project.gitSlug + '.git'
                        }

                        issueManagement {
                            system 'github'
                            url 'https://github.com/' + project.gitSlug + '/issues'
                        }

                        licenses {
                            license {
                                name 'MIT'
                                url 'https://opensource.org/licenses/MIT'
                                distribution 'repo'
                            }
                        }

                        developers {
                            developer {
                                id 'TheRealp455w0rd'
                                name 'Mike Balser'
                                roles { role 'developer' }
                            }
                        }
                    }
                }
            }
        }
    }
}

String getGroup() {
	if (project.hasProperty("jarGroup")) {
		return project.getProperty("jarGroup");
	}
	return "p455w0rd";
}

String getVersion() {
	String major = "1";
	String revision = "0";
	String patch = "0";
	if (project.hasProperty("modPropertiesJavaFile")) {
		String prefix = "public static final String VERSION = \"";
		File file = file(project.modPropertiesJavaFile)
		file.eachLine { String s ->
			s = s.trim();
			if (s.startsWith(prefix)) {
				s = s.substring(prefix.length(), s.length() - 2);
				String[] pts = s.split("\\.");

				major = pts[0];
				revision = pts[1];
				patch = pts[2];
			}
		}
	}
	return "$major.$revision.$patch";
}

String getModId() {
	String modid = "mymod";
	if (project.hasProperty("modPropertiesJavaFile")) {
		String prefix = "public static final String MODID = \"";
		File file = file(project.modPropertiesJavaFile)
		file.eachLine { String s ->
			s = s.trim();
			if (s.startsWith(prefix)) {
				s = s.substring(prefix.length(), s.length() - 2);
				modid = s;
			}
		}
	}
	return "$modid";
}

String getModName() {
	String modname = "MyMod";
	if (project.hasProperty("modPropertiesJavaFile")) {
		String prefix = "public static final String NAME = \"";
		File file = file(project.modPropertiesJavaFile)
		file.eachLine { String s ->
			s = s.trim();
			if (s.startsWith(prefix)) {
				s = s.substring(prefix.length(), s.length() - 2);
				modname = s;
			}
		}
	}
	return "$modname";
}

String getArchiveName() {
	if (project.hasProperty("archiveBase")) {
		return project.archiveBase;
	}
	return getModName();
}
