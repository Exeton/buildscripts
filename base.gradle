buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
		maven {
            url 'https://plugins.gradle.org/m2/'
		}
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'java'

apply from : 'https://raw.githubusercontent.com/p455w0rd/buildscripts/1.14-Forge/repos.gradle'

import net.minecraftforge.gradle.common.task.SignJar

version = getMCVersion() + "-" + getVersion()
group = getGroup()
archivesBaseName = getArchiveName()
sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

minecraft {
    mappings channel: 'snapshot', version: getMappingsVersion()
	
    runs {
        client = {
            properties 'forge.logging.markers': 'SCAN,REGISTRIES,REGISTRYDUMP'
            properties 'forge.logging.console.level': 'debug'
            workingDirectory project.file('run').canonicalPath
            source sourceSets.main
        }
        server = {
            properties 'forge.logging.markers': 'SCAN,REGISTRIES,REGISTRYDUMP'
            properties 'forge.logging.console.level': 'debug'
            workingDirectory project.file('run').canonicalPath
            source sourceSets.main
        }
    }
}

dependencies {
	minecraft "net.minecraftforge:forge:+"
	// + getMCVersion() + "-" + getForgeSpec()
	compileOnly fg.deobf("mezz.jei:jei-${getMCVersion()}:+:api")
	runtimeOnly fg.deobf("mezz.jei:jei-${getMCVersion()}:+")
}

processResources {
	inputs.property "version", getVersion()
	inputs.property "mcversion", getMCVersion()
	from(sourceSets.main.resources.srcDirs) {
		include 'mods.toml'
		expand 'version': getVersion(), 'mcversion': getMCVersion()
	}
	from(sourceSets.main.resources.srcDirs) {
		exclude 'mods.toml'
	}
}

task signJar(type: SignJar, dependsOn: jar) {
    onlyIf {
        project.hasProperty('keyStore')
    }
	if (project.hasProperty("keyStore")) {
		keyStore = project.keyStore
		alias = project.keyStoreAlias
		storePass = project.keyStorePass
		keyPass = project.keyStoreKeyPass
		inputFile = jar.archivePath
		outputFile = jar.archivePath
	}
}

build.dependsOn signJar

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    classifier = 'sources'
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}

artifacts {
	archives sourcesJar
	archives deobfJar
}

jar {
    manifest {
        attributes(["Specification-Title": getModName(),
                    "Specification-Vendor": getModId(),
                    "Specification-Version": "1",
                    "Implementation-Title": getModName(),
                    "Implementation-Version": getVersion(),
                    "Implementation-Vendor" : getModId(),
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")])
    }
	if (project.hasProperty("signSHA1")) {
		manifest.attributes += ["Fingerprint": project.getProperty("signSHA1")]
	}
}

uploadArchives {
    repositories {
        mavenDeployer {
            if (project.hasProperty("local_maven") || (project.hasProperty("maven_user") && project.hasProperty("maven_pass") && project.hasProperty("gitSlug"))) {
				if (project.hasProperty("maven_pass")) {
					repository(url: "http://maven_upload.covers1624.net/") {
						authentication(userName: project.getProperty("maven_user"), password: project.getProperty("maven_pass"))
					}
				} else {
					repository(url: "file://${local_maven}/.m2/repository")
				}
                pom {
                    groupId = project.group
                    // Force the maven upload to use the <mcversion>-<version> syntax preferred at files
                    artifactId = project.archivesBaseName
                    project {
                        name project.archivesBaseName
                        packaging 'jar'
                        description project.archivesBaseName
                        url 'https://github.com/' + project.gitSlug

                        scm {
                            url 'https://github.com/' + project.gitSlug
                            connection 'scm:git:git://github.com/' + project.gitSlug + '.git'
                            developerConnection 'scm:git:git@github.com:' + project.gitSlug + '.git'
                        }

                        issueManagement {
                            system 'github'
                            url 'https://github.com/' + project.gitSlug + '/issues'
                        }

                        licenses {
                            license {
                                name 'MIT'
                                url 'https://opensource.org/licenses/MIT'
                                distribution 'repo'
                            }
                        }

                        developers {
                            developer {
                                id 'TheRealp455w0rd'
                                name 'Mike Balser'
                                roles { role 'developer' }
                            }
                        }
                    }
                }
            }
        }
    }
}

String getMCVersion() {
	return "1.14.2";
}

String getForgeSpec() {
	return "26.0.63";
}

String getGroup() {
	if (project.hasProperty("jarGroup")) {
		return project.getProperty("jarGroup");
	}
	return "p455w0rd." + getModId();
}

String getMappingsVersion() {
	def today = new Date();
	def yesterday = today - 1;
	def dateStr = yesterday.format('yyyyMMdd');
    return "${dateStr}-" + getMCVersion();
}

String getVersion() {
	String major = "1";
	String revision = "0";
	String patch = "0";
	if (project.hasProperty("modPropertiesJavaFile")) {
		String prefix = "public static final String VERSION = \"";
		File file = file(project.modPropertiesJavaFile)
		file.eachLine { String s ->
			s = s.trim();
			if (s.startsWith(prefix)) {
				s = s.substring(prefix.length(), s.length() - 2);
				String[] pts = s.split("\\.");

				major = pts[0];
				revision = pts[1];
				patch = pts[2];
			}
		}
	}
	return "$major.$revision.$patch";
}

String getModId() {
	String modid = "mymod";
	if (project.hasProperty("modPropertiesJavaFile")) {
		String prefix = "public static final String MODID = \"";
		File file = file(project.modPropertiesJavaFile)
		file.eachLine { String s ->
			s = s.trim();
			if (s.startsWith(prefix)) {
				s = s.substring(prefix.length(), s.length() - 2);
				modid = s;
			}
		}
	}
	return "$modid";
}

String getModName() {
	String modname = "MyMod";
	if (project.hasProperty("modPropertiesJavaFile")) {
		String prefix = "public static final String NAME = \"";
		File file = file(project.modPropertiesJavaFile)
		file.eachLine { String s ->
			s = s.trim();
			if (s.startsWith(prefix)) {
				s = s.substring(prefix.length(), s.length() - 2);
				modname = s;
			}
		}
	}
	return "$modname";
}

String getArchiveName() {
	if (project.hasProperty("archiveBase")) {
		return project.archiveBase;
	}
	return getModName();
}